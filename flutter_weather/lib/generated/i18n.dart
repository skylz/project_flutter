import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get __1 => "_____________________________________通用____________________________________________";
  String get __2 => "_____________________________________主页_____________________________________";
  String get __3 => "_____________________________________天气_____________________________________";
  String get __4 => "_____________________________________福利_____________________________________";
  String get __5 => "_____________________________________闲读_____________________________________";
  String get __6 => "_____________________________________收藏_____________________________________";
  String get __7 => "_____________________________________设置_____________________________________";
  String get __8 => "_____________________________________关于_____________________________________";
  String get about => "About";
  String get air => "Air";
  String get allGirl => "Update";
  String get allGirlFail => "Update images load failed!";
  String get alreadyCopyUrl => "Url copied";
  String get alreadyNew => "已是最新版本！";
  String get apkDownloading => "应用正在更新中！";
  String get apkFail => "APK下载失败！";
  String get apkPleaseInstall => "APK下载成功！请安装";
  String get apkSize => "APK大小：";
  String get apkStartDownload => "安装包开始下载";
  String get appName => "假装看天气(Flutter)";
  String get beachGirl => "Beach";
  String get beachGirlFail => "Beach images load failed!";
  String get calculating => "正在计算...";
  String get canNotSetWallpaper => "Can't set wallpaper, please check network!";
  String get cancel => "Cancel";
  String get certain => "Confirm";
  String get checkUpdate => "检查更新";
  String get checkUpdateFail => "检测更新失败，请检查网络！";
  String get chooseTheme => "选择主题色";
  String get cityChoose => "City Select";
  String get cityControl => "City Manage";
  String get clearCache => "清除缓存";
  String get close => "Close";
  String get cloudy => "Cloudy";
  String get co => "一氧化碳";
  String get collect => "Favorite";
  String get colorFlame => "烈焰红";
  String get colorGreenery => "绿篱";
  String get colorIslandParadise => "天堂岛";
  String get colorKale => "甘蓝";
  String get colorLapisBlue => "青石色";
  String get colorNiagara => "尼亚加拉";
  String get colorNone => "呀是啦累";
  String get colorPaleDogWood => "山茱萸";
  String get colorPinkYarrow => "粉蓍草";
  String get colorPrimroseYellow => "樱草黄";
  String get comf => "Comfortable";
  String get commonUse => "通用";
  String get connectMe => "联系我";
  String get copyUrl => "Copy Url";
  String get cw => "Car Wash";
  String get dataSource => "Data source: HeWeather";
  String get download => "Download";
  String get drsg => "Dress";
  String get egg => "Egg";
  String get eggFail => "Egg images load failed!";
  String get feedback => "意见反馈";
  String get flashRain => "Thunderstorm";
  String get flu => "Flu";
  String get fog => "Fog";
  String get friday => "Friday";
  String get ganHuo => "GanHuo";
  String get ganHuoTitleFail => "Categories load failed!";
  String get gank => "Gank";
  String get gankFail => "Gank images load failed!";
  String get gift => "Gift";
  String get giftPhotos => "福利(图集)";
  String get hail => "Hail";
  String get hasNewVersion => "检测到新版本";
  String get hasNewVersionLong => "已有新版本等待下载，是否立即下载更新？（继续使用旧版本可能会发生意想不到的错误）";
  String get hasNewVersionLongIOS => "IOS请自行拉下代码编译！（继续使用旧版本可能会发生意想不到的错误）";
  String get hum => "Humidity";
  String get imageSet => "Image Set";
  String get imageSetFail => "Image set load failed!";
  String get imgSave => "Save";
  String get imgSaveFail => "Image save failed!";
  String get imgSaveSuccess => "Image save succeed";
  String get install => "Install";
  String get japanGirl => "Japanese";
  String get japanGirlFail => "Japanese images load failed!";
  String get landGirl => "Street";
  String get landGirlFail => "Street images load failed!";
  String get likeHammer => "仿锤子便签";
  String get listEmpty => "列表为空";
  String get loadFail => "Load failed!";
  String get locationError => "Positioning failed, please give permission";
  String get moduleControl => "模块管理";
  String get monday => "Monday";
  String get mostHot => "Hot";
  String get mostHotFail => "Hot images load failed!";
  String get netError => "Network went to aliens~";
  String get newVersionReady => "新版本准备就绪";
  String get newVersionReadyLong => "新版本的安装包已经在WIFI环境下载完成，是否立即安装？（该过程不消耗流量）";
  String get no2 => "二氧化氮";
  String get o3 => "臭氧";
  String get openByOtherWay => "Open By Browser";
  String get openOrCloseModule => "启用/关闭模块";
  String get overcast => "Overcast";
  String get overview => "概述";
  String get pm10 => "可吸入颗粒物";
  String get pm25 => "细颗粒物";
  String get pres => "Pressure";
  String get programHome => "项目主页";
  String get rain => "Rain";
  String get read => "Article";
  String get readOrGanHuo => "Article/GanHuo";
  String get readTitleFail => "Categories load failed!";
  String get refresh => "Refresh";
  String get repeatCity => "City selection repeat";
  String get retry => "Retry";
  String get retryToExit => "Back again to exit app!";
  String get sandstorm => "Sandstorm";
  String get saturday => "Saturday";
  String get selfGirl => "Selfie";
  String get selfGirlFail => "Selfie images load failed!";
  String get setAsWallpaper => "Wallpaper";
  String get setting => "Setting";
  String get sexGirl => "Sexy";
  String get sexGirlFail => "Sexy images load failed!！";
  String get share => "Share";
  String get shareApp => "分享应用";
  String get shareAppUrl => "来不及了，赶急上车！https://github.com/hahafather007/flutter_weather";
  String get shareType => "分享形式";
  String get smog => "Smog";
  String get snow => "Snow";
  String get snowRain => "Sleet";
  String get so2 => "二氧化硫";
  String get sport => "Sport";
  String get sunday => "Sunday";
  String get sunny => "Sunny";
  String get taiwanGirFail => "Taiwan images load failed!";
  String get taiwanGirl => "Taiwan";
  String get textOnly => "纯文本";
  String get thankItems => "• 和风天气提供天气数据\n• 高德定位提供定位服务\n• 『Gank』『煎蛋』『妹子图』提供妹纸数据\n• 丰富精彩的开源世界 https://github.com/hahafather007/flutter_weather/blob/master/README.md";
  String get thanks => "感谢";
  String get themeColor => "主题色";
  String get thursday => "Thursday";
  String get today => "Today";
  String get trav => "Travel";
  String get tuesday => "Tuesday";
  String get unknown => "Unknown";
  String get updateTime => "更新时间：";
  String get uv => "UV";
  String get wait => "Later";
  String get weather => "Weather";
  String get weatherFail => "Weather load failed!";
  String get weathersView => "Weathers Preview";
  String get wednesday => "Wednesday";
  String get zhihuName => "• @活雷轰";
  String get zhihuPage => "活雷轰-知乎";
  String readLoadFail(String value) => "$value load failed!";
  String windScValue(String value) => "Level $value";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get gift => "福利";
  @override
  String get hum => "湿度";
  @override
  String get pres => "气压";
  @override
  String get egg => "煎蛋";
  @override
  String get trav => "旅游";
  @override
  String get about => "关于";
  @override
  String get canNotSetWallpaper => "无法设置壁纸，请检查网络！";
  @override
  String get colorNiagara => "尼亚加拉";
  @override
  String get apkStartDownload => "安装包开始下载";
  @override
  String get checkUpdate => "检查更新";
  @override
  String get openByOtherWay => "其他方式打开";
  @override
  String get moduleControl => "模块管理";
  @override
  String get shareType => "分享形式";
  @override
  String get setting => "设置";
  @override
  String get selfGirl => "妹子自拍";
  @override
  String get feedback => "意见反馈";
  @override
  String get thanks => "感谢";
  @override
  String get setAsWallpaper => "设为壁纸";
  @override
  String get weather => "天气";
  @override
  String get alreadyNew => "已是最新版本！";
  @override
  String get gank => "Gank";
  @override
  String get sexGirlFail => "性感妹子获取失败！";
  @override
  String get locationError => "定位失败，请给与定位权限";
  @override
  String get comf => "舒适度";
  @override
  String get sunday => "星期日";
  @override
  String get mostHot => "最热";
  @override
  String get pm25 => "细颗粒物";
  @override
  String get colorNone => "呀是啦累";
  @override
  String get install => "安装";
  @override
  String get themeColor => "主题色";
  @override
  String get imageSetFail => "组图加载失败！";
  @override
  String get flashRain => "雷雨";
  @override
  String get apkFail => "APK下载失败！";
  @override
  String get wait => "稍后";
  @override
  String get saturday => "星期六";
  @override
  String get readTitleFail => "闲读分类获取失败！";
  @override
  String get allGirl => "每日更新";
  @override
  String get air => "空气";
  @override
  String get apkDownloading => "应用正在更新中！";
  @override
  String get drsg => "穿衣";
  @override
  String get unknown => "未知";
  @override
  String get __1 => "_____________________________________通用____________________________________________";
  @override
  String get __3 => "_____________________________________天气_____________________________________";
  @override
  String get textOnly => "纯文本";
  @override
  String get __2 => "_____________________________________主页_____________________________________";
  @override
  String get __5 => "_____________________________________闲读_____________________________________";
  @override
  String get __4 => "_____________________________________福利_____________________________________";
  @override
  String get __7 => "_____________________________________设置_____________________________________";
  @override
  String get so2 => "二氧化硫";
  @override
  String get japanGirlFail => "日本妹子获取失败！";
  @override
  String get __6 => "_____________________________________收藏_____________________________________";
  @override
  String get wednesday => "星期三";
  @override
  String get __8 => "_____________________________________关于_____________________________________";
  @override
  String get share => "分享";
  @override
  String get gankFail => "Gank获取失败！";
  @override
  String get likeHammer => "仿锤子便签";
  @override
  String get apkSize => "APK大小：";
  @override
  String get connectMe => "联系我";
  @override
  String get colorKale => "甘蓝";
  @override
  String get close => "关闭";
  @override
  String get monday => "星期一";
  @override
  String get zhihuName => "• @活雷轰";
  @override
  String get zhihuPage => "活雷轰-知乎";
  @override
  String get allGirlFail => "每日更新获取失败！";
  @override
  String get openOrCloseModule => "启用/关闭模块";
  @override
  String get shareApp => "分享应用";
  @override
  String get refresh => "刷新";
  @override
  String get thursday => "星期四";
  @override
  String get updateTime => "更新时间：";
  @override
  String get co => "一氧化碳";
  @override
  String get colorPaleDogWood => "山茱萸";
  @override
  String get flu => "感冒";
  @override
  String get copyUrl => "复制URL";
  @override
  String get cw => "洗车";
  @override
  String get newVersionReadyLong => "新版本的安装包已经在WIFI环境下载完成，是否立即安装？（该过程不消耗流量）";
  @override
  String get certain => "确定";
  @override
  String get retryToExit => "再按一次退出App！";
  @override
  String get cityControl => "城市管理";
  @override
  String get overcast => "阴";
  @override
  String get selfGirlFail => "妹子自拍获取失败！";
  @override
  String get hasNewVersionLongIOS => "IOS请自行拉下代码编译！（继续使用旧版本可能会发生意想不到的错误）";
  @override
  String get snowRain => "雨夹雪";
  @override
  String get landGirlFail => "街拍美女获取失败！";
  @override
  String get colorIslandParadise => "天堂岛";
  @override
  String get smog => "雾霾";
  @override
  String get imgSaveSuccess => "图片保存成功";
  @override
  String get clearCache => "清除缓存";
  @override
  String get beachGirl => "清纯妹子";
  @override
  String get no2 => "二氧化氮";
  @override
  String get download => "下载";
  @override
  String get colorGreenery => "绿篱";
  @override
  String get taiwanGirFail => "台湾妹子获取失败！";
  @override
  String get sunny => "晴";
  @override
  String get readOrGanHuo => "闲读/干货";
  @override
  String get colorPinkYarrow => "粉蓍草";
  @override
  String get sexGirl => "性感妹子";
  @override
  String get uv => "紫外线";
  @override
  String get rain => "雨";
  @override
  String get imgSave => "保存图片";
  @override
  String get read => "闲读";
  @override
  String get o3 => "臭氧";
  @override
  String get mostHotFail => "最热获取失败！";
  @override
  String get eggFail => "煎蛋获取失败！";
  @override
  String get shareAppUrl => "来不及了，赶急上车！https://github.com/hahafather007/flutter_weather";
  @override
  String get colorPrimroseYellow => "樱草黄";
  @override
  String get repeatCity => "重复的城市！";
  @override
  String get landGirl => "街拍美女";
  @override
  String get programHome => "项目主页";
  @override
  String get snow => "雪";
  @override
  String get ganHuoTitleFail => "干货分类获取失败！";
  @override
  String get checkUpdateFail => "检测更新失败，请检查网络！";
  @override
  String get weatherFail => "天气信息获取失败！";
  @override
  String get collect => "收藏";
  @override
  String get dataSource => "数据来源：和风天气";
  @override
  String get weathersView => "动态天气预览";
  @override
  String get colorLapisBlue => "青石色";
  @override
  String get fog => "雾";
  @override
  String get ganHuo => "干货";
  @override
  String get imageSet => "图集";
  @override
  String get hasNewVersionLong => "已有新版本等待下载，是否立即下载更新？（继续使用旧版本可能会发生意想不到的错误）";
  @override
  String get taiwanGirl => "台湾妹子";
  @override
  String get sandstorm => "沙尘暴";
  @override
  String get beachGirlFail => "清纯妹子获取失败！";
  @override
  String get newVersionReady => "新版本准备就绪";
  @override
  String get giftPhotos => "福利(图集)";
  @override
  String get hasNewVersion => "检测到新版本";
  @override
  String get thankItems => "• 和风天气提供天气数据\n• 高德定位提供定位服务\n• 『Gank』『煎蛋』『妹子图』提供妹纸数据\n• 丰富精彩的开源世界 https://github.com/hahafather007/flutter_weather/blob/master/README.md";
  @override
  String get japanGirl => "日本妹子";
  @override
  String get today => "今天";
  @override
  String get listEmpty => "列表为空";
  @override
  String get friday => "星期五";
  @override
  String get retry => "重试";
  @override
  String get chooseTheme => "选择主题色";
  @override
  String get loadFail => "加载失败！";
  @override
  String get netError => "网络开小差了哦~";
  @override
  String get overview => "概述";
  @override
  String get appName => "假装看天气(Flutter)";
  @override
  String get pm10 => "可吸入颗粒物";
  @override
  String get calculating => "正在计算...";
  @override
  String get colorFlame => "烈焰红";
  @override
  String get hail => "冰雹";
  @override
  String get commonUse => "通用";
  @override
  String get cloudy => "多云";
  @override
  String get apkPleaseInstall => "APK下载成功，请安装";
  @override
  String get alreadyCopyUrl => "已复制链接";
  @override
  String get tuesday => "星期二";
  @override
  String get cityChoose => "城市选择";
  @override
  String get imgSaveFail => "图片保存失败！";
  @override
  String get sport => "运动";
  @override
  String readLoadFail(String value) => "$value\u200b获取失败！";
  @override
  String windScValue(String value) => "$value\u200b级";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
